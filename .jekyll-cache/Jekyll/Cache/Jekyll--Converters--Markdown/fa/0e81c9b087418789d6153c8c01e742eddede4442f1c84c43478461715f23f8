I"ž<h1 id="solving-odes-in-matlab">Solving ODEs in Matlab</h1>

<p>MATLABâ€™s <code class="language-plaintext highlighter-rouge">ode45()</code> solver makes solving ODEs numerically fairly simple. 
This function uses the <a href="https://en.wikipedia.org/wiki/Runge%E2%80%93Kutta_methods">Runge-Kutta (4,5)</a> algorithm.<br />
Required inputs are the ODE in question, the time-span vector to solve it for, 
and an initial condition (more option are available in the MATLAB documentation).<br />
Outputs are the time vector and solution matrix.</p>

<p>To start, define an explicit first-order ODE in the form:</p>

<p><code class="language-plaintext highlighter-rouge">x_dot = f(x)</code></p>

<p>This function can be described in MATLAB as:</p>

<div class="language-matlab highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="p">[</span><span class="n">x_dot</span><span class="p">]</span> <span class="o">=</span> <span class="n">myfunc</span><span class="p">(</span><span class="n">t</span><span class="p">,</span><span class="n">x</span><span class="p">)</span>

<span class="n">x_dot</span> <span class="o">=</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">);</span> <span class="c1">% write out your function f here</span>

<span class="k">end</span>
</code></pre></div></div>

<p>Note that the first argument of <code class="language-plaintext highlighter-rouge">myfunc</code> is time. If your function does not take time explicitly, you
will still need to put a placeholder there.</p>

<p>After your function is declared, choose a time-span and an initial condition and call 
the function as follows:</p>

<div class="language-matlab highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tspan</span> <span class="o">=</span> <span class="p">[</span><span class="n">tstart</span> <span class="n">tend</span><span class="p">];</span>
<span class="n">x0</span> <span class="o">=</span> <span class="c1">% put your nx1 matrix here</span>

<span class="p">[</span><span class="n">tout</span><span class="p">,</span><span class="n">xout</span><span class="p">]</span> <span class="o">=</span> <span class="nb">ode45</span><span class="p">(</span><span class="o">@</span><span class="n">myfunc</span><span class="p">,</span><span class="n">tspan</span><span class="p">,</span><span class="n">x0</span><span class="p">);</span>
</code></pre></div></div>

<p>By default, <code class="language-plaintext highlighter-rouge">ode45</code> will give the solved states of x.  If your output function 
is <code class="language-plaintext highlighter-rouge">y = Cx</code> consisting of p outputs, you will have to manually find an output using the 
following code:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>C = % put your nxp matrix here
y = C*xout;
</code></pre></div></div>
:ET